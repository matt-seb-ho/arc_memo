Here's the implementation of the puzzle described, which involves drawing a straight line between two points using Bresenham's line algorithm:

```python
from common import *
import numpy as np
from typing import *

# concepts:
# line drawing, grid update, Bresenham's line algorithm

# description:
# In the input, you will see a grid with two distinct pixels marked as start and end.
# To make the output, draw a straight line connecting these two pixels using Bresenham's line algorithm.
# Update the grid by coloring each pixel along the path with a specified line color.
# All other pixels in the grid remain unchanged.

def main(input_grid):
    # Copy the input grid to create the output grid
    output_grid = np.copy(input_grid)
    
    # Get indices of the start and end points
    start_coords = np.argwhere(input_grid == Color.BLUE)[0]
    end_coords = np.argwhere(input_grid == Color.RED)[0]
    
    # Define the line color
    line_color = Color.GREEN
    
    # Bresenham's line algorithm implementation
    x0, y0 = start_coords
    x1, y1 = end_coords
    
    dx = abs(x1 - x0)
    dy = abs(y1 - y0)
    sx = 1 if x0 < x1 else -1
    sy = 1 if y0 < y1 else -1
    
    err = dx - dy
    
    while True:
        output_grid[x0, y0] = line_color
        if x0 == x1 and y0 == y1:
            break
        e2 = 2 * err
        if e2 > -dy:
            err -= dy
            x0 += sx
        if e2 < dx:
            err += dx
            y0 += sy
    
    return output_grid

def generate_input():
    # Define the grid size
    n, m = np.random.randint(10, 15, size=2)
    grid = np.zeros((n, m), dtype=int)
    
    # Randomly place the start and end pixels ensuring they are distinct
    start_x, start_y = np.random.randint(0, n), np.random.randint(0, m)
    end_x, end_y = np.random.randint(0, n), np.random.randint(0, m)
    
    # Ensure the start and end points are distinct
    while start_x == end_x and start_y == end_y:
        end_x, end_y = np.random.randint(0, n), np.random.randint(0, m)
    
    # Mark the start and end points
    grid[start_x, start_y] = Color.BLUE
    grid[end_x, end_y] = Color.RED
    
    return grid
```

### Explanation:
- **`main()` function**: This function implements Bresenham's line algorithm to draw a straight line between two given points. The start and end points are identified by unique colors (e.g., blue for start and red for end). The line is drawn in green.
- **`generate_input()` function**: This function generates a random grid and places a blue start pixel and a red end pixel at distinct positions. The grid size is chosen randomly between a range to ensure variability.
- **Bresenham's algorithm**: This is a classic algorithm to draw lines on a grid, ensuring that the line appears continuous and straight, even when the start and end points are not aligned horizontally or vertically.

This puzzle allows middle-schoolers to explore algorithms for line drawing and understand how grid updates occur through deterministic transformations.