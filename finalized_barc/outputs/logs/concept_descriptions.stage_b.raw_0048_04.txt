Here's the implementation of the puzzle based on the provided description. This puzzle involves identifying contiguous runs of a specific color and applying a transformation to the ends of these runs.

```python
from common import *

import numpy as np
from typing import *

# concepts:
# color runs, recolor, bounding box, symmetry

# description:
# Identify contiguous horizontal or vertical runs of cyan (color=4) in the grid. For each run, compute k as the minimum of 3 or half the run's length (rounded down).
# Recolor the first k and last k cells of each run to yellow (color=3), leaving the interior cells unchanged. 
# This transformation applies symmetrically to both ends of each cyan run, capping them with yellow while preserving the run's central portion.

def main(input_grid: np.ndarray) -> np.ndarray:
    output_grid = np.copy(input_grid)

    # Function to process a single line (row or column) for color runs
    def process_line(line):
        start = None
        for i in range(len(line)):
            if line[i] == Color.CYAN:
                if start is None:
                    start = i
            else:
                if start is not None:
                    end = i
                    process_run(line, start, end)
                    start = None
        if start is not None:
            process_run(line, start, len(line))

    # Function to recolor the ends of a color run
    def process_run(line, start, end):
        run_length = end - start
        k = min(3, run_length // 2)
        for i in range(start, start + k):
            line[i] = Color.YELLOW
        for i in range(end - k, end):
            line[i] = Color.YELLOW

    # Process all rows
    for row in output_grid:
        process_line(row)

    # Process all columns
    for col in output_grid.T:
        process_line(col)

    return output_grid

def generate_input() -> np.ndarray:
    # Randomly choose dimensions for the grid
    n, m = np.random.randint(5, 15, size=2)
    grid = np.random.choice(
        [Color.BLACK, Color.CYAN],
        size=(n, m),
        p=[0.7, 0.3]  # Adjust the probability to control the density of cyan
    )
    return grid
```

### Explanation:

- **Concepts**: The puzzle revolves around identifying runs of a specific color and applying a symmetric transformation to these runs.
- **Description**: The input is a grid with potentially contiguous runs of the color cyan. The task is to identify these runs and apply a transformation where the first and last few cells of each run are recolored to yellow, preserving the central portion.
- **Implementation**:
  - The `main` function processes each row and column to find and transform cyan runs.
  - The `process_line` function iterates over a line of the grid (either a row or a column) to identify runs of cyan.
  - The `process_run` function recolors the first and last `k` cells of a run to yellow, calculated based on the run's length.
  - The `generate_input` function creates a stochastic grid with random dimensions and cyan distribution, suitable for testing the transformation.