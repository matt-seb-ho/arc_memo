Here's an implementation for the puzzle described:

```python
from common import *

import numpy as np
from typing import *

# concepts:
# unique color selection, connected components, guide object identification

# description:
# The input grid contains several connected components with various colors.
# The goal is to extract the guide object, which is the only object with a unique color among all components.
# All other objects are ignored in the output.

def main(input_grid):
    # Find all connected components
    components = find_connected_components(input_grid, connectivity=4, monochromatic=True)
    
    # Create a dictionary to count occurrences of each color
    color_count = {}
    for component in components:
        # All pixels in the component have the same color, take any
        component_color = component[np.argwhere(component != Color.BLACK)[0][0], np.argwhere(component != Color.BLACK)[0][1]]
        if component_color in color_count:
            color_count[component_color] += 1
        else:
            color_count[component_color] = 1

    # Identify the guide object's color: it should only occur once
    guide_color = None
    for color, count in color_count.items():
        if count == 1:
            guide_color = color
            break

    # Find and return the guide object
    output_grid = np.full_like(input_grid, Color.BLACK)
    for component in components:
        if np.any(component == guide_color):
            blit_object(output_grid, component, background=Color.BLACK)
            break

    return output_grid

def generate_input():
    n = np.random.randint(8, 12)
    input_grid = np.full((n, n), Color.BLACK)
    
    # Generate a random number of components
    num_components = np.random.randint(4, 8)
    used_colors = set()

    for _ in range(num_components):
        # Create random components with unique colors
        while True:
            color_palette = list(Color.NOT_BLACK - used_colors)
            obj_color = np.random.choice(color_palette)
            used_colors.add(obj_color)
            sprite = random_sprite(np.random.randint(2, 4), np.random.randint(2, 4), color_palette=[obj_color])
            try:
                x, y = random_free_location_for_sprite(input_grid, sprite, padding=1, border_size=1)
                blit_sprite(input_grid, sprite, x, y)
                break
            except ValueError:
                continue

    # Duplicate one color to ensure all but one are non-unique
    duplicate_color = np.random.choice(list(used_colors))
    while True:
        sprite = random_sprite(np.random.randint(2, 4), np.random.randint(2, 4), color_palette=[duplicate_color])
        try:
            x, y = random_free_location_for_sprite(input_grid, sprite, padding=1, border_size=1)
            blit_sprite(input_grid, sprite, x, y)
            break
        except ValueError:
            continue
            
    return input_grid
```

### Explanation
- **`main` function**: 
  - Extracts all connected components from the input grid using `find_connected_components`.
  - Counts occurrences of each color among the components.
  - Identifies the guide object by finding the component with a unique color.
  - Outputs a grid showing only the guide object.

- **`generate_input` function**: 
  - Randomly generates a grid size.
  - Places several components with different colors.
  - Ensures all but one color are duplicated, ensuring only one component has a unique color. This guides the middle-schoolers to identify the correct object.