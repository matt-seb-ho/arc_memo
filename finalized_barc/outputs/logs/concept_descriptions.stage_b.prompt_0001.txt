You are a puzzle maker designing geometric, physical, and topological puzzles for curious middle-schoolers.

Each puzzle consists of uncovering a deterministic rule, pattern, procedure, algorithm, or transformation law that maps inputs to outputs.
Both the inputs and outputs are 2D grids of colored pixels. There are 10 colors, but the order of the colors is never relevant to the puzzle.

The middle schoolers are trying to discover this deterministic transformation, which can be implemented as a Python function called `main`.
Designing a puzzle involves also creating example inputs, which can be implemented as a Python function called `generate_input`. Unlike `main`, the `generate_input` function should be stochastic, so that every time you run it, you get another good example of what the transformation can be applied to.

Here is a overview of the puzzle you are designing:

Concepts: 
holes, enclosed regions, flood fill, background detection

Description: 
Identify holes as background-color regions fully enclosed by a guide object, not connected to the grid border. Use flood-fill from the grid border to mark exterior background; any remaining background component inside the object is a hole. Fill these holes with the target object color, ensuring they are completely enclosed by the guide object.

Please implement the puzzle by writing code containing the `generate_input` and `main` functions. Use the following standard library (`common.py`):

```python
def draw_line(grid, x, y, end_x=None, end_y=None, length=None, direction=None, color=None, stop_at_color=[]):
    """
    Draws a line starting at (x, y) extending to (end_x, end_y) or of the specified length in the specified direction
    Direction should be a vector with elements -1, 0, or 1.
    If length is None, then the line will continue until it hits the edge of the grid.

    stop_at_color: optional list of colors that the line should stop at. If the line hits a pixel of one of these colors, it will stop.

    Returns the endpoint of the line.

    Example:
    # blue diagonal line from (0, 0) to (2, 2)
    stop_x, stop_y = draw_line(grid, 0, 0, length=3, color=blue, direction=(1, 1))
    draw_line(grid, 0, 0, end_x=2, end_y=2, color=blue)
    assert (stop_x, stop_y) == (2, 2)
    """

def find_connected_components(grid, background=Color.BLACK, connectivity=4, monochromatic=True):
    """
    Find the connected components in the grid. Returns a list of connected components, where each connected component is a numpy array.

    connectivity: 4 or 8, for 4-way or 8-way connectivity.
    monochromatic: if True, each connected component is assumed to have only one color. If False, each connected component can include multiple colors.
    """

def blit_object(grid, obj, background=Color.BLACK):
    """
    Draws an object onto the grid using its current location.

    Example usage:
    blit_object(output_grid, an_object, background=background_color)
    """

def blit_sprite(grid, sprite, x, y, background=Color.BLACK):
    """
    Draws a sprite onto the grid at the specified location.

    Example usage:
    blit_sprite(output_grid, the_sprite, x=x, y=y, background=background_color)
    """

def object_position(obj, background=Color.BLACK, anchor='upper left'):
    """
    (x,y) position of the provided object. By default, the upper left corner.

    anchor: "upper left", "upper right", "lower left", "lower right", "center", "upper center", "lower center", "left center", "right center"

    Example usage:
    x, y = object_position(obj, background=background_color, anchor="upper left")
    middle_x, middle_y = object_position(obj, background=background_color, anchor="center")
    """

def crop(grid, background=Color.BLACK):
    """
    Crop the grid to the smallest bounding box that contains all non-background pixels.

    Example usage:
    # Extract a sprite from an object
    sprite = crop(an_object, background=background_color)
    """

def random_free_location_for_sprite(grid, sprite, background=Color.BLACK, border_size=0, padding=0, padding_connectivity=8):
    """
    Find a random free location for the sprite in the grid
    Returns a tuple (x, y) of the top-left corner of the sprite in the grid, which can be passed to `blit_sprite`

    border_size: minimum distance from the edge of the grid
    background: color treated as transparent
    padding: if non-zero, the sprite will be padded with a non-background color before checking for collision
    padding_connectivity: 4 or 8, for 4-way or 8-way connectivity when padding the sprite

    Example usage:
    x, y = random_free_location_for_sprite(grid, sprite, padding=1, padding_connectivity=8, border_size=1, background=Color.BLACK) # find the location, using generous padding
    assert not collision(object1=grid, object2=sprite, x2=x, y2=y)
    blit_sprite(grid, sprite, x, y)

    If no free location can be found, raises a ValueError.
    """

def object_interior(grid, background=Color.BLACK):
    """
    Computes the interior of the object (including edges)

    returns a new grid of `bool` where True indicates that the pixel is part of the object's interior.

    Example usage:
    interior = object_interior(obj, background=Color.BLACK)
    for x, y in np.argwhere(interior):
        # x,y is either inside the object or at least on its edge
    """

def object_boundary(grid, background=Color.BLACK):
    """
    Computes the boundary of the object (excluding interior)

    returns a new grid of `bool` where True indicates that the pixel is part of the object's boundary.

    Example usage:
    boundary = object_boundary(obj, background=Color.BLACK)
    assert np.all(obj[boundary] != Color.BLACK)
    """

def random_sprite(n, m, density=0.5, symmetry=None, color_palette=None, connectivity=4, background=Color.BLACK):
    """
    Generate a sprite (an object), represented as a numpy array.

    n, m: dimensions of the sprite. If these are lists, then a random value will be chosen from the list.
    symmetry: optional type of symmetry to apply to the sprite. Can be 'horizontal', 'vertical', 'diagonal', 'radial', 'mirror', 'not_symmetric'. If None, a random symmetry type will be chosen.
    color_palette: optional list of colors to use in the sprite. If None, a random color palette will be chosen.

    Returns an (n,m) NumPy array representing the sprite.
    """

class Color:
    """
    Enum for colors

    Color.BLACK, Color.BLUE, Color.RED, Color.GREEN, Color.YELLOW, Color.GREY, Color.PINK, Color.ORANGE, Color.TEAL, Color.MAROON

    Use Color.ALL_COLORS for `set` of all possible colors
    Use Color.NOT_BLACK for `set` of all colors except black

    Colors are strings (NOT integers), so you CAN'T do math/arithmetic/indexing on them.
    (The exception is Color.BLACK, which is 0)
    """
```

Here are some examples from puzzles with similar descriptions to show you how to use functions in `common.py`:

Example puzzle code:
```python
from common import *

import numpy as np
from typing import *

# concepts:
# objects, topology

# description:
# In the input grid, you will see various blue objects. Some are "hollow" and contain a fully-enclosed region, while others do not have a middle that is separate from outside the object, and fully enclosed.
# To create the output grid, copy the input grid. Then, change the color of all "hollow" shapes to be green.

def main(input_grid):
    objects = find_connected_components(input_grid, connectivity=4)
    output_grid = input_grid.copy()
    for object in objects:
        if is_hollow(object):
            object[object != Color.BLACK] = Color.GREEN
        blit_object(output_grid, object, background=Color.BLACK)

    return output_grid

def is_hollow(object):
    # to check if it contains a fully enclosed region, find everything that is enclosed by the object (in its interior), but not actually part of the object
    interior_mask = object_interior(object)
    object_mask = object != Color.BLACK
    hollow_mask = interior_mask & ~object_mask
    return np.any(hollow_mask)


def generate_input():
    n = np.random.randint(10, 28)
    input_grid = np.full((n, n), Color.BLACK)
    # create a bunch of random objects. all objects are either (1) hollow, in which case they are the border of a rectangle of some size, or (2) not hollow, in which case they are a subset of a border of a rectangle of some size.
    # make sure we place at least one hollow and nonhollow object. then add random objects until somewhat full.

    def random_hollow_object():
        n, m = np.random.randint(3, 7), np.random.randint(3, 7)
        obj = np.full((n, m), Color.BLUE)
        obj[1:n-1, 1:m-1] = Color.BLACK
        return obj

    def random_nonhollow_object():
        obj = random_hollow_object()
        # remove a random number of dots from it
        size = np.count_nonzero(obj)
        new_size = np.random.randint(1, size)
        xs, ys = np.where(obj != Color.BLACK)
        for i in range(size - new_size):
            obj[xs[i], ys[i]] = Color.BLACK

        return obj

    try:
        # add one hollow and one nonhollow object, then add random objects until somewhat full.
        obj = random_hollow_object()
        x, y = random_free_location_for_sprite(input_grid, obj, padding=1)
        blit_sprite(input_grid, obj, x=x, y=y)

        obj = random_nonhollow_object()
        x, y = random_free_location_for_sprite(input_grid, obj, padding=1)
        blit_sprite(input_grid, obj, x=x, y=y)
    except ValueError:
        return generate_input()

    while True:
        obj = random_hollow_object() if np.random.rand() < 0.5 else random_nonhollow_object()
        try:
            x, y = random_free_location_for_sprite(input_grid, obj, padding=1)
            blit_sprite(input_grid, obj, x=x, y=y)
        except ValueError:
            return input_grid
```

Example puzzle code:
```python
from common import *

import numpy as np
from typing import *

# concepts:
# filling, topology

# description:
# The input is a black 12x12 grid containing a few grey squares. Each square has a "hole" in it, a contiguous black region of pixels.
# To create the output, fill in the hole of each grey object with red if the hole is a square. Otherwise, leave the hole as is.

def main(input_grid):
    # get the grey squares
    objects = find_connected_components(input_grid, background=Color.BLACK, connectivity=4, monochromatic=True)

    # create an output grid to store the result
    output_grid = np.full(input_grid.shape, Color.BLACK)

    # for each grey square, fill in the hole if it is a square
    for obj in objects:
        # to check if the grey object contains a square hole, we can check if the bounding box of the hole is a square.
        # To do so, first crop the object, then find the black hole inside
        sprite = crop(obj, background=Color.BLACK)
        hole_mask = (sprite == Color.BLACK) & (object_interior(sprite, background=Color.BLACK))

        # check if the mask is square
        def is_square(thing):
            """thing can be a mask or a sprite or an object"""
            thing = crop(thing)
            return np.sum(thing != Color.BLACK) == thing.shape[0] * thing.shape[1] and thing.shape[0] == thing.shape[1]
        
        if is_square(hole_mask):
            sprite[hole_mask] = Color.RED

        # get location of object so we can blit the possibly edited sprite back into the grid
        x, y = object_position(obj, background=Color.BLACK)
        blit_sprite(output_grid, sprite, x, y)

    return output_grid


def generate_input():
    # create a 12x12 black grid
    grid = np.full((12, 12), Color.BLACK)

    # add 2-3 grey squares.
    # For each grey square, add a hole in the middle.
    # 50% chance the hole is a square, otherwise it's a random contiguous object.
    # The hole should not overlap with the border of the square.

    num_grey_squares = np.random.randint(2, 4)

    for _ in range(num_grey_squares):
        # create grey square, and try to find a location for it
        length = np.random.randint(4, 6)
        grey_square = np.full((length, length), Color.GREY)
        try:
            x, y = random_free_location_for_sprite(grid, grey_square, padding=1)
        except ValueError:
            # we were unable to find a space for a square; try over from scratch
            return generate_input()

        # # add a hole in the middle.
        # # 50% chance the hole is a square, otherwise it's a random contiguous object.
        # # The hole should not overlap with the border of the square.
        has_square_hole = np.random.choice([True, False])
        if has_square_hole:
            hole_size = np.random.randint(1, length - 1)
            hole_x, hole_y = np.random.randint(1, length - hole_size), np.random.randint(1, length - hole_size)
            grey_square[hole_x:hole_x + hole_size, hole_y:hole_y + hole_size] = Color.BLACK
        else:
            hole_obj = random_sprite(length-2, length-2, color_palette=[Color.BLACK], background=Color.GREY)
            grey_square[1:-1, 1:-1] = hole_obj

        grid = blit_sprite(grid, grey_square, x, y)

    return grid
```

Example puzzle code:
```python
from common import *

import numpy as np
from typing import *

# concepts:
# topology

# description:
# The input grid is a square grid with black and green pixels. The input grid should have regions that are enclosed by the green pixels. 
# To produce the output, you need to find the enclosed regions in the input grid, and then color them yellow. 
                
def main(input_grid):
    # Create initial output grid template based on input grid.
    output_grid = input_grid.copy()

    # Find enclosed regions
    interior_mask = object_interior(input_grid)
    boundary_mask = object_boundary(input_grid)
    inside_but_not_on_edge = interior_mask & ~boundary_mask

    # Color enclosed regions
    for x, y in np.argwhere(inside_but_not_on_edge):
        if output_grid[x, y] == Color.BLACK:
            output_grid[x, y] = Color.YELLOW

    return output_grid


def generate_input():
    # Generate a square grid of arbitrary size with black background, size from 5x5 to 20x20
    n = random.randint(10, 20)
    grid = np.zeros((n, n), dtype=int)

    # Generate some random green sprites, and then hollow out the interior
    n_objects = random.randint(1, 3)
    for _ in range(n_objects):
        n, m = random.randint(4, 10), random.randint(4, 10)
        sprite = random_sprite(n, m, color_palette=[Color.GREEN], connectivity=8)
        interior_mask = object_interior(sprite)
        boundary_mask = object_boundary(sprite)
        interior_but_not_edges = interior_mask & ~boundary_mask
        sprite[interior_but_not_edges] = Color.BLACK

        try:
            x, y = random_free_location_for_sprite(grid, sprite, border_size=1, padding=1)
        except:
            continue

        blit_sprite(grid, sprite, x, y, background=Color.BLACK)
    
    return grid
```

Example puzzle code:
```python
from common import *

import numpy as np
from typing import *

# concepts:
# objects, growing, pixel manipulation

# description:
# In the input you will see a small multicolor object, and a few big rectangles. Each rectangle has a few colored pixels sprinkled inside it. The background is NOT black.
# To make the output:
# 1. Remove the small object from the input
# 2. Place copies of the small object centered on top of the colored pixels sprinkled inside the rectangles
# 3. The small object has pointy things sticking out of it. Extend each pointy thing outward until it hits the edge of the rectangle

def main(input_grid):
    # Plan:
    # 1. Figure out the background color. Replace it with black (we'll swap it back later)
    # 2. Find the small object and delete it
    # 3. Identify the pointy things sticking out of the small sprite, and what their displacement vectors are
    # 4. For each rectangle, find the colored pixels inside it, put copies and extend the pointy things

    # For these inputs, background color is the most common color
    background_color = np.argmax(np.bincount(input_grid.flatten()))
    # Replace the background color with black
    input_grid[input_grid == background_color] = Color.BLACK

    # 2. Find the small object and delete it
    objects = find_connected_components(input_grid, monochromatic=False, connectivity=8)
    smallest_object = min(objects, key=lambda x: np.count_nonzero(x))
    input_grid[smallest_object != Color.BLACK] = Color.BLACK    

    # Crop the object to get its sprite, and then decide if something is pointing:
    # Pointy means a pixel on the edge with its other edge-neighbors black
    sprite = crop(smallest_object)
    pointy_positions = get_points(sprite)    
    
    # 4. For each rectangle, find the colored pixels inside it, put copies and extend the pointy things
    output_grid = np.copy(input_grid)
    rectangles = find_connected_components(input_grid, monochromatic=False, connectivity=8)
    for rectangle in rectangles:
        # Figure out the most common color of the rectangle (apart from black, which is the background)
        main_rectangle_color = max(Color.NOT_BLACK, key=lambda x: np.count_nonzero(rectangle == x))
        colored_pixels = np.where((rectangle != Color.BLACK) & (rectangle != main_rectangle_color))
        for x, y in zip(*colored_pixels):
            # Place a copy of the sprite centered on the colored pixel. If any of the sprite goes out of bounds, crop it to the legal region (inside the rectangle)
            blit_sprite(output_grid, sprite, x - sprite.shape[0]//2, y - sprite.shape[1]//2, background=Color.BLACK)
            # bounds check accomplished by overwriting with black
            output_grid[input_grid == Color.BLACK] = Color.BLACK

            
            for point_x, point_y in pointy_positions:                
                # Extend the pointy things
                # Get the direction and color of the pointy thing, relative to the sprite
                dx, dy = np.sign([point_x - sprite.shape[0]//2, point_y - sprite.shape[1]//2])
                dx, dy = int(dx), int(dy)
                color = sprite[point_x, point_y]
                draw_line(output_grid, x + dx, y + dy, length=None, direction=(dx, dy), color=color, stop_at_color=[Color.BLACK])


    # Swap the background color back
    output_grid[output_grid == Color.BLACK] = background_color

    return output_grid

def get_points(sprite):
    """
    Returns the positions of the pointy things sticking out of the sprite.
    Something is pointy if it is on the edge the sprite, and both of its neighboring edge pixels are black
    """
    edge_indices = get_edge_indices(sprite)
    next_neighbor, previous_neighbor = edge_indices[1:] + edge_indices[:1], edge_indices[-1:] + edge_indices[:-1]
    pointy_positions = [ (x, y) for (x, y), (next_x, next_y), (prev_x, prev_y) in zip(edge_indices, next_neighbor, previous_neighbor)
                         if sprite[x, y] != Color.BLACK and sprite[next_x, next_y] == Color.BLACK and sprite[prev_x, prev_y] == Color.BLACK ]
    return pointy_positions

def get_edge_indices(sprite):
    """Returns a list of all the (i,j) locations of the edge pixels"""
    edge_indices = [ (x, 0) for x in range(sprite.shape[0]) ]
    edge_indices.extend([ (sprite.shape[0]-1, y) for y in range(1, sprite.shape[1]) ])
    edge_indices.extend([ (x, sprite.shape[1]-1) for x in range(sprite.shape[0]-2, -1, -1) ])
    edge_indices.extend([ (0, y) for y in range(sprite.shape[1]-2, 0, -1) ])
    return edge_indices

def generate_input():
    background_color = random.choice(Color.NOT_BLACK)
    rectangle_color = random.choice([color for color in Color.NOT_BLACK if color != background_color])
    marker_color = random.choice([color for color in Color.NOT_BLACK if color != background_color and color != rectangle_color])

    # Make the sprite, and then add pointy things to it
    w, h = random.choice([2, 3]), random.choice([2,3])
    sprite = random_sprite(w, h, symmetry="not_symmetric",
                            color_palette=[color for color in Color.NOT_BLACK if color not in [background_color, rectangle_color, marker_color]])
    # put a ring of black pixels around the sprite and then color some of them to be pointing
    sprite = np.pad(sprite, 1, constant_values=Color.BLACK)
    w, h = sprite.shape
    possible_pointy_positions = [ (w//2, 0), (w-1, h//2), (w//2, h-1), (0, h//2) ]
    pointy_positions = random.sample(possible_pointy_positions, np.random.randint(1, 4))
    for x, y in pointy_positions:
        sprite[x, y] = random.choice([color for color in Color.NOT_BLACK if color not in [background_color, rectangle_color, marker_color]])
    sprite = crop(sprite)
    
    # Make the grid
    n, m = np.random.randint(20, 30), np.random.randint(20, 30)
    grid = np.full((n, m), Color.BLACK)
    
    # Make the rectangles
    n_rectangles = random.choice([1, 2])
    for _ in range(n_rectangles):
        w, h = np.random.randint(n//3, 2*n//3), np.random.randint(m//3, 2*m//3)
        rectangle_sprite = np.full((w, h), rectangle_color)
        # sprinkle some colored pixels
        for _ in range(random.choice([1, 2, 3])):
            x, y = np.random.randint(1, w-1), np.random.randint(1, h-1)
            rectangle_sprite[x, y] = marker_color
        x, y = random_free_location_for_sprite(grid, rectangle_sprite, padding=1, padding_connectivity=8)
        blit_sprite(grid, rectangle_sprite, x, y)

    # Place the sprite in the grid
    x, y = random_free_location_for_sprite(grid, sprite, padding=1, padding_connectivity=8)
    blit_sprite(grid, sprite, x, y)

    # Change the background
    grid[grid == Color.BLACK] = background_color

    return grid
```

Your task is to implement the puzzle, following these steps:

1. Inspect the example puzzle implementations, making note of the functions used and the physical/geometric/topological/logical details
2. Inspect the new puzzle's description
3. Brainstorm a possible implementation for the new puzzle
4. Generate a code block formatted like the earlier examples with a comment starting `# concepts:` listing the concepts and `# description:` describing the inputs and transformation from the given description.

Be sure to make the transformation `main` deterministic. Follow the description closely.
