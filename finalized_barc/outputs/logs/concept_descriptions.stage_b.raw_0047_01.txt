```python
from common import *

import numpy as np
from typing import *

# concepts:
# contiguous run detection, row/column scanning, maximal sequences, color filtering

# description:
# The input is a grid containing various colors, including a target color (cyan).
# For each row and column, detect and extract maximal contiguous runs of the target color.
# Output these runs as lists of coordinates or slices, representing the start and end of each contiguous sequence of the target color.
# Non-target colors and isolated target pixels are ignored. The result is a collection of all maximal cyan runs in the grid.

def main(input_grid):
    target_color = Color.CYAN
    rows, cols = input_grid.shape
    runs = []

    # Scan each row for contiguous runs of the target color
    for r in range(rows):
        c = 0
        while c < cols:
            if input_grid[r, c] == target_color:
                start_col = c
                while c < cols and input_grid[r, c] == target_color:
                    c += 1
                if c - start_col > 1:
                    runs.append((r, start_col, r, c - 1))
            c += 1

    # Scan each column for contiguous runs of the target color
    for c in range(cols):
        r = 0
        while r < rows:
            if input_grid[r, c] == target_color:
                start_row = r
                while r < rows and input_grid[r, c] == target_color:
                    r += 1
                if r - start_row > 1:
                    runs.append((start_row, c, r - 1, c))
            r += 1

    return runs

def generate_input():
    # Generate a grid of arbitrary size with a random background color and random colors scattered
    n = random.randint(10, 15)
    m = random.randint(10, 15)
    grid = np.full((n, m), Color.BLACK)

    # Randomly scatter various colors
    num_colors = random.randint(3, 5)
    colors = np.random.choice(list(Color.NOT_BLACK), num_colors, replace=False)
    for color in colors:
        randomly_scatter_points(grid, color=color, density=0.1)

    # Ensure there are some maximal contiguous runs of the cyan color
    num_cyan_runs = random.randint(1, 3)
    for _ in range(num_cyan_runs):
        # Choose to create a run either in a row or a column
        if random.choice([True, False]):
            # Create a horizontal run
            row = random.randint(0, n - 1)
            start_col = random.randint(0, m - 4)
            length = random.randint(2, m - start_col)
            grid[row, start_col:start_col + length] = Color.CYAN
        else:
            # Create a vertical run
            col = random.randint(0, m - 1)
            start_row = random.randint(0, n - 4)
            length = random.randint(2, n - start_row)
            grid[start_row:start_row + length, col] = Color.CYAN

    return grid
```

In this implementation, the `main` function scans the input grid for maximal contiguous runs of a target color (cyan) both row-wise and column-wise. The `generate_input` function creates a grid with random colors and ensures that there are some maximal contiguous runs of cyan, which the `main` function will detect.