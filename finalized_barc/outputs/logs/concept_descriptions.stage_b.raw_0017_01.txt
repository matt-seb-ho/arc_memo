```python
from common import *

import numpy as np
from typing import *

# concepts:
# holes, enclosed regions, flood-fill, background components

# description:
# The input consists of a grid with a single object and background (0). The object may contain several fully enclosed 0-regions, or "holes".
# The output grid highlights these enclosed holes by changing their color to red. 
# Non-enclosed regions (connected to the grid border) should remain unchanged.

def main(input_grid):
    # Create a copy of the input grid to work on
    output_grid = input_grid.copy()
    
    # Step 1: Identify all components of 0s
    zero_components = find_connected_components(input_grid, background=Color.BLACK, connectivity=4, monochromatic=True)
    
    # Step 2: Flood-fill from the border to identify non-enclosed regions
    border_connected = np.zeros_like(input_grid, dtype=bool)
    for x in range(input_grid.shape[0]):
        for y in [0, input_grid.shape[1]-1]:
            if input_grid[x, y] == Color.BLACK:
                border_connected[x, y] = True
    for y in range(input_grid.shape[1]):
        for x in [0, input_grid.shape[0]-1]:
            if input_grid[x, y] == Color.BLACK:
                border_connected[x, y] = True

    border_connected = flood_fill(input_grid, border_connected, Color.BLACK)

    # Step 3: Highlight the fully enclosed zero regions by changing their color to red
    for component in zero_components:
        # Check if the component is fully enclosed by the object
        component_mask = (component == Color.BLACK)
        if not np.any(border_connected & component_mask):
            output_grid[component_mask] = Color.RED

    return output_grid

def flood_fill(grid, mask, target_color):
    # A simple flood-fill algorithm to mark all connected regions of target_color
    from scipy.ndimage import binary_dilation
    filled = binary_dilation(mask, structure=np.ones((3, 3)), iterations=-1)
    return filled & (grid == target_color)

def generate_input():
    # Create a grid with a single object and background (0)
    n = np.random.randint(10, 15)
    input_grid = np.full((n, n), Color.BLACK)

    # Generate a random monochromatic non-black object
    object_color = np.random.choice(list(Color.NOT_BLACK))
    obj = random_sprite(n-2, n-2, density=0.7, color_palette=[object_color], background=Color.BLACK)

    # Blit the object into the grid
    blit_object(input_grid, obj)

    # Introduce some holes (enclosed 0-regions) within the object
    for _ in range(np.random.randint(1, 4)):
        hole_size = np.random.randint(2, 4)
        hole = np.full((hole_size, hole_size), Color.BLACK)
        try:
            x, y = random_free_location_for_sprite(input_grid, hole, background=object_color, padding=1)
            blit_sprite(input_grid, hole, x, y)
        except ValueError:
            continue

    return input_grid
```

In this implementation, the `main` function identifies fully enclosed zero regions within an object by using flood-fill from the border to mark non-enclosed regions. The enclosed regions are then highlighted by changing their color to red. The `generate_input` function creates random grids with a single object and some enclosed holes inside it, ensuring variability in each generated input.