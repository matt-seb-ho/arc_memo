concepts:
  # - concept: object
  #   kind: term definition
  #   description: a group of pixels that are treated as a single entity
  # - concept: guide object
  #   kind: term definition
  #   description: an object that serves as a reference from which color/shape/position/size is used
  - concept: extract objects 
    kind: routine
    routine_subtype: intermediate
    parameters:
      - name: input grid
        typing: grid
        description: grid (or region of a grid) to extract objects from
      - name: single color
        typing: bool 
        description: if True, only extract objects of a single color
      - name: connectivity
        typing: str
        description: object connectedness (4-way, 8-way, or none). None admits non-contiguous objects.
      - name: background color
        typing: str
        description: the background color to ignore when extracting objects. Default value is 0 or black.

  - concept: filter objects
    kind: routine
    routine_subtype: intermediate
    output: list[object]
    parameters:
      - name: input objects
        typing: list[object]
        description: the list of objects to filter
      - name: criteria
        typing: selection criteria := Callable[[object], bool]
        description: filter criteria
    description: filter a list of objects based on some criteria

  - concept: find object
    kind: routine
    routine_subtype: intermediate
    output: object
    parameters:
      - name: input objects
        typing: list[object]
        description: the list of objects to search in
      - name: criteria
        typing: selection criteria
        description: criteria to find the object
    description: find an object in a list of objects based on some criteria

  - concept: shape match criteria
    kind: routine
    routine_subtype: selection criteria
    output_typing: bool
    parameters:
      - name: target
        typing: shape
      - name: other
        typing: shape
        description: shape to match against
    description: condition on whether an object matches the other shape

  - concept: recolor object
    kind: routine
    routine_subtype: grid manipulation
    output_typing: grid | object
    parameters:
      - name: object
        typing: object
        description: the object to recolor
      - name: color scheme
        typing: color scheme := color | Callable[[object], color]
        description: either a single color or logic that determines what object gets which color
    description: recolor an object based on a color scheme
    cues:
      - if existing structures from the input grid appear in the output grid with different colors

  - concept: split grid
    kind: structure
    description: where the grid is split into multiple regions that are treated as distinct
    cues:
      - divider lines that span the grid and partition it
      - color based regions-- i.e. pixels of a color only appear in a certain section of the grid

  - concept: split regions
    kind: routine
    routine_subtype: intermediate
    output_typing: list[grid]
    parameters:
      - name: input grid
        typing: grid
        description: the grid to split into regions
      - name: splitting scheme
        typing: splitting scheme := str | Callable[[grid], list[grid]]
        description: logic to determine how to split the grid into regions

  - concept: draw object
    kind: routine
    routine_subtype: grid manipulation
    output_typing: grid
    parameters:
      - name: sprite
        typing: grid
        description: the sprite to draw on top of the base grid
      - name: base
        typing: grid
        description: the base grid to draw onto
      - name: position
        typing: position
        description: the position to place the sprite on the base grid
    description: draw a sprite on top of a base grid, drawing over the base grid with the sprite's non-background pixels
    cues:
      - if input objects are replicated one or more times in the output

  - concept: is color criteria
    kind: routine
    routine_subtype: selection criteria
    output_typing: bool
    parameters:
      - name: target
        typing: object
      - name: color
        typing: color
    description: condition on whether an object is a given color

  - concept: move object
    kind: routine
    routine_subtype: grid manipulation
    output_typing: grid | object
    parameters:
      - name: object
        typing: object
        description: the object to move
      - name: position
        typing: position
        description: the position to move the object to
    description: move an object to a new position in the grid, updating the grid accordingly
    cues:
      - if existing structures from the input grid appear in the output grid with different positions
    implementation:
      - can draw the object at the new position, but most erase the object pixels from the old position first

  - concept: tile object
    kind: routine
    routine_subtype: grid manipulation
    output_typing: grid
    parameters:
      - name: object
        typing: object
        description: the object to tile
      - name: start
        typing: position
        description: the starting position to tile the object from
      - name: direction
        typing: direction := Literal["up", "down", "left", "right"]
        description: the direction to tile the object in (up, down, left, or right)
      - name: gap
        typing: int
        description: the gap between tiled objects
    description: repeatedly copy an object in a specified direction
    cues:
      - if existing structures from the input grid appear in the output grid repeatedly in a regular formation

  - concept: create new grid
    kind: routine
    routine_subtype: grid manipulation
    output_typing: grid
    parameters:
      - name: dimensions
        typing: dimensions := tuple[int, int]
        description: the dimensions of the new grid to create (rows, columns)
      - name: fill color
        typing: color
        description: the color to fill the new grid with (default is 0)
    description: create a new grid with specified dimensions, initialized with a fill color
    cues:
      - if input grid dimensions don't match the output grid dimensions

  - concept: reflect grid
    kind: routine
    routine_subtype: grid manipulation
    output_typing: grid
    parameters:
      - name: grid
        typing: grid
        description: the grid to reflect
      - name: axis
        typing: axis := Literal["horizontal", "vertical", "both"]
        description: the axis to reflect the grid across (horizontal, vertical, or both)
    description: reflect a grid across a specified axis, creating a mirrored version of the grid
    implementation:
      - use np.flip
    cues:
      - if existing structures from the input grid appear in the output grid with mirrored positions

  - concept: rotate object
    kind: routine
    routine_subtype: grid manipulation
    output_typing: grid | object
    parameters:
      - name: object
        typing: object
        description: the object to rotate
      - name: angle
        typing: int
        description: the angle to rotate the object by (in degrees)
    description: rotate an object by a specified angle, updating the grid accordingly
    implementation:
      - use np.rot90
    cues:
      - if you see an object in the input grid that is rotated in the output grid
      - if you see an object that occurs multiple times with different rotations

  - concept: size criteria
    kind: routine
    routine_subtype: selection criteria
    output_typing: bool
    parameters:
      - name: target
        typing: object
      - name: comparison operator
        typing: comparison operator := Literal["==", "!=", "<", "<=", ">", ">="]
      - name: comparison value
        typing: int
        description: the value to compare the object's size against
    description: condition on whether an object meets a size criteria (numerical comparison on object size against some other value)

  - concept: has color criteria
    kind: routine
    routine_subtype: selection criteria
    output_typing: bool
    parameters:
      - name: target
        typing: object
      - name: color
        typing: color
    description: condition on whether a target object's colors include a given color

  - concept: draw line
    kind: routine
    routine_subtype: grid manipulation
    output_typing: grid
    parameters:
      - name: start
        typing: position
        description: the starting pixel to draw the line from
      - name: end
        typing: position
        description: the ending pixel to draw the line to
      - name: color
        typing: color
        description: the color of the line to draw
    description: draw a line between two pixels in a grid, updating the grid accordingly
    implementation:
      - draw the line pixel by pixel, picking a starting point and following the direction to the end point
    cues:
      - output grid contains lines not present in the input grid
